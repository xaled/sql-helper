#!/usr/bin/python
<%!
    from profiles.filters import upper,upperFirst,lower
    def createargs(classname, vars):
        argline = '"("+ KEY_${classname|upper}_ID + " INTEGER PRIMARY KEY'
        for v in vars:
            argline += '," + KEY_${classname|upper}_%s + " %s'%(upper(v['name']),v['stype'])
        argline += ' " + ")"'
        return argline


    def getKeys(vars):
        if len(vars) == 0: return ""
        keys = lower(vars[0]['name'])
        for v in vars[1:]:
            keys += ", " + lower(v['name'])
        return keys

    def getPreparedVars(vars_num):
        if vars_num == 0: return ""
        line = "?"
        for i in range(vars_num-1):
            line += ", ?"
        return line

    def getUpdateKeys(vars):
        if len(vars)==0: return ""
        line = lower(vars[0]['name']) + " = ?"
        for v in vars:
            line += ", " + lower(v['name']) + " = ?"
        return line
%>
<%
    helperclassname = upperFirst(dbname) + "DatabaseHandler"
%>
"""
    ${helperclassname} generated by sql-helper for database ${dbname} version ${dbversion}
    package: ${helperpackage}
    author:
    https://github.com/xaled/sql-helper.git
"""
import sqlite3

# I- All variables and constants

DATABASE_VERSION = 1;

DATABASE_NAME = "${dbname}";
DATABASE_PATH = "${dbname}.db";

# Database table title
% for c in classes:
TABLE_${c['name']|upper} = "${c['name']|lower}";
% endfor

% for c in classes:
    // ${c['name']} Table Columns titles
KEY_${c['name']|upper}_ID = "ID";
   % for v in c['vars']:
KEY_${c['name']|upper}_${v['name']|upper} = "${v['name']|lower}";
   % endfor
% endfor

connexion = None

# II- Connection
try:
    connection = sqlite3.connect(DATABASE_PATH)
except sqlite3.Error, e:
    print "Error %s:" % e.args[0]

# III- Creating & updating Tables
def oncreate():
    try:
        cur = connection.cursor()
% for c in classes:
        sql = "CREATE TABLE " + TABLE_${c['name']|upper} + ${createargs(c['vars'])};
        cur.execute(sql)

% endfor
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]




def onupgrade():
    try:
        cur = connection.cursor()
% for c in classes:
        sql = "DROP TABLE IF EXISTS " +  TABLE_${c['name']|upper}
        cur.execute(sql)
% endfor
        oncreate()
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]



#IV- All CRUD(Create, Read, Update, Delete) Operations
#=====================================================
#IV-0 prepare & fetch
#---------------------
% for c in classes:
def get_${c['name']|lower}_prepare_data(_${c['name']|lower}):
    """ return data dict for prepared statement """
    data = dict()
    % for v in c['vars']:
    data['${v['name']|lower}] = _${c['name']|lower}.${v['name']|lower}
    % endfor
    return data
% endfor


% for c in classes:
def fetch_${c['name']|lower}(row):
    """ return fetched instance of ${c['name']|upperFirst} from row """
    o = ${c['name']|upperFirst}()
    o.id = row['ID']
    % for v in c['vars']:
    o.${v['name']|lower} = row['${v['name']|lower}']
    % endfor
    return o
% endfor


#IV.1 Creating
#-------------
% for c in classes:
def add_${c['name']|lower}( _${c['name']|lower}) :
"""Adding new ${c['name']}"""
    try:
        cur = connection.cursor()
        sql = "INSERT INTO "+TABLE_${c['name']|upper} +" (${getKeys(c['vars'])}) "+
                         "VALUES (${getPreparedVars(len(c['vars']))});";


        data = get_${c['name']|lower}_prepare_data(_${c['name']|lower})
        cur.execute(sql, data)
        return cur.lastrowid
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]
        return None # TODO: or raise?

% endfor

# IV.2 Reading
#-------------
# IV.2.1 Getting Single
% for c in classes:

def get_${c['name']|lower}(id):
    """ selects single ${c['name']} by id """
    try:
        sql = "SELECT * FROM TABLE_${c['name']|upper} WHERE id=? LIMIT 1"
        cur = connection.cursor()
        cur.execute(sql,(id))
        rows = cur.fetchall()
        if len(rows) == 1:
            return fetch_${c['name']|lower}(rows[0])
        else:
            return None
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]
        return None # TODO: should raise?
% endfor



# IV.2.2 Getting All
% for c in classes:

def get_all_${c['name']|lower}s() {
    """ selecting all ${c['name']} """
    ret = list()
    try:
        sql = "SELECT * FROM TABLE_${c['name']|upper}"
        cur = connection.cursor()
        cur.execute(sql)
        rows = cur.fetchall()
        for r in rows:
            ret.append(fetch_${c['name']|lower}(r))
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]
        return None # TODO: should raise?
    return ret

% endfor

# IV.2.3 TODO: special gets


# IV.2.4 Getting counts
% for c in classes:

def getAll${c['name']|upperFirst}sCount():
    """ Getting ${c['name']}s count"""
    try:
        sql = "SELECT COUNT(*) as countt FROM TABLE_${c['name']|upper}"
        cur = connection.cursor()
        cur.execute(sql)
        rows = cur.fetchall()
        if len(rows) == 1:
            rows[0]['countt']
        else:
            return None
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]
        return None # TODO: should raise?
% endfor

# IV.3 Updating
#==============
# IV.3.1 Updating single
#-----------------------
% for c in classes:
def update_${c['name']|lower}( _${c['name']|lower}):
    """ Updating single ${c['name']} """
    try:
        sql = "UPDATE "+TABLE_${c['name']|upper} +" SET ${getUpdateKeys(c['vars'])} WHERE id=?";
        cur = connection.cursor()
        cur.execute(sql,(id)) UNFETCH??
    except sqlite3.Error, e:
        print "Error %s:" % e.args[0]
    // Updating single ${c['name']}
    public void update${c['name']|upperFirst}(${c['name']|upperFirst} _${c['name']|lower}) {
        try {
            String sql = "UPDATE "+TABLE_${c['name']|upper} +" SET ${getUpdateKeys(c['vars'])} "+
                         "WHERE id=?";
            PreparedStatement stmt = connection.prepareStatement(sql);
            int i = 1;
    % for v in c['vars']:
            stmt.set${v['jtype']|upperFirst}(i++,_${c['name']|lower}.get${v['name']|upperFirst}());
    % endfor
            stmt.setLong(i++,_${c['name']|lower}.getId());
            stmt.executeUpdate(sql);
            stmt.close();
            connection.commit();
        } catch (SQLException e) {
			System.err.println( e.getClass().getName() + ": " + e.getMessage() );
		}
    }
% endfor

    //IV.3.2 TODO: Updating special


    //IV.4 Deleting
% for c in classes:
    // Deleting single ${c['name']}
    public void delete${c['name']|upperFirst}(${c['name']|upperFirst} _${c['name']|lower}) {
        try {
            String sql = "DELETE FROM "+TABLE_${c['name']|upper} + " WHERE id=?";
            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.setLong(1,_${c['name']|lower}.getId());
            stmt.executeUpdate(sql);
            stmt.close();
            connection.commit();
        } catch (SQLException e) {
			System.err.println( e.getClass().getName() + ": " + e.getMessage() );
		}
    }
% endfor




}
