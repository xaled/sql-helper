__author__ = 'xaled'
import os
from mako.template import Template
#TODO: make it oop!


def fillTemplate(template, data):
    output = template
    for k in data:
        output = output.replace("::%s::"%str(k).upper(), data[k])
    return output

def checkConfig(config):
    return True


def createHelper(config):
    checkConfig(config)
    # init vars
    db_name = config['database']
    db_version = config['database-version']
    err_profile = config['error-profile']
    classes = config['classes']
    models_package = "sqlhelper.%s.model"%(db_name)
    models_dir = models_package.replace(".","/")
    helper_package = "sqlhelper.%s.helper"%(db_name)
    helper_dir = helper_package.replace(".","/")


    # create models files
    for c in classes:
        class_name = c['name']
        attributes = c['attributes']
        private_vars = ""
        constructor_args = ""
        constructor_aff = ""
        getters = ""

        # privatevars
        for a in attributes:
            type = a['type']
            jtype = javatypes[type]
            varname = a['name']
            varnamelow = str(varname).lower()
            varnameup = varnamelow[0].upper() + varnamelow[1:]
            private_vars += "\n" + fillTemplate(vardeclare_template,{"type":jtype, "varnamelow":varnamelow})
            constructor_args += "%s %s,"%(jtype,varnamelow)
            constructor_aff += "\n         this.%s = %s;"%(varnamelow,varnamelow)
            getters += "\n" + fillTemplate(getset_template,{"type":jtype, "varname":varname, "varnamelow":varnamelow, "varnameup":varnameup})

        constructor = fillTemplate(fullconstructor_template,{"constructargs":constructor_args[:-1],"constructaff":constructor_aff})
        class_text = fillTemplate(model_template, {"package":models_package, "classname":class_name, "dbname":db_name, "dbversion":db_version, "private_vars":private_vars, "fullconstructor":constructor,"getters-setters":getters})
        os.system("mkdir -p '%s'"%(helper_dir))
        class_file = os.path.join(helper_dir,class_name+".java")
        fou = open(class_file,"w")
        fou.write(class_text)
        fou.close()

    # create helper file
    helpertemplate = Template(filename='helper.temp')
    helper_classname = db_name[0].upper() + db_name[1:] + "DatabaseHandler"
    classlist = list()
    for c in classes:
        cc = dict()
        cc['name'] = c['name']
        cc['nameup'] = c['name'].upper()
        cc['namelow'] = c['name'].lower()
        classlist.append(cc)
    helper_text = helpertemplate.render(helper_package=helper_package, model_package=models_package, helper_classname=helper_classname,dbname=db_name,classes=classlist)
    print helper_text


#-----------------
#Dictionaries

javatypes = {"string":"String", "int":"long", "bool":"boolean","float":"double","date":"long","blob":"byte[]"}
sqlitetypes = {"string":"TEXT", "int":"INTEGER", "bool":"INTEGER","float":"REAL","date":"INTEGER","blob":"BLOB"}


#-------------------
#TEMPLATES




model_template = """
package ::PACKAGE::;

import java.io.Serializable;

public class  ::CLASSNAME:: implements Serializable{
    /**
     *  ::CLASSNAME:: generated by xaled/sqlhelper for database ::DBNAME:: version ::DBVERSION::
     *  https://github.com/xaled/sql-helper.git
     */
    private static final long serialVersionUID = 1L;
    //private variables
    ::PRIVATE_VARS::


        // Empty Constructor
        public ::CLASSNAME::(){

        }

        // Full Constuctor
        ::FULLCONSTRUCTOR::

        // Getters and Setters
        ::GETTERS-SETTERS::

	}

"""

getset_template ="""
		// getting ::VARNAME::
		public ::TYPE:: get::VARNAMEUP::(){
			return this.::VARNAMELOW::;

		}
		// setting ::VARNAME::
		public void set::VARNAMEUP::(::TYPE:: ::VARNAMELOW::){
			this.::VARNAMELOW::= ::VARNAMELOW::;
		}
"""

vardeclare_template = """
	private ::TYPE:: ::VARNAMELOW::;
"""

fullconstructor_template = """
        public ::CLASSNAME::(::CONSTRUCTARGS::){
::CONSTRUCTAFF::
        }
"""


if __name__ == "__main__":
    import sys
    import json
    if len(sys.argv) < 2:
        print "need one arg: json file"
        sys.exit(1)
    config = json.load(open(sys.argv[1],"r"))
    print config
    createHelper(config)
